'use client';

import { motion } from 'framer-motion';
import { Heart, Share2, Copy, Check } from 'lucide-react';
import { useState, useEffect } from 'react';
import confetti from 'canvas-confetti';
import { toast } from 'sonner';

interface ReactionBarProps {
  excuseId: string;
  excuse: string;
  onReaction: (type: 'like' | 'share' | 'copy') => void;
}

export function ReactionBar({ excuseId, excuse, onReaction }: ReactionBarProps) {
  const [liked, setLiked] = useState(false);
  const [copied, setCopied] = useState(false);

  useEffect(() => {
    const likedExcuses = JSON.parse(localStorage.getItem('likedExcuses') || '[]');
    setLiked(likedExcuses.includes(excuseId));
  }, [excuseId]);

  const triggerConfetti = () => {
    confetti({
      particleCount: 100,
      spread: 70,
      origin: { y: 0.6 },
      colors: ['#ec4899', '#8b5cf6', '#3b82f6'],
    });
  };

  const handleLike = () => {
    if (liked) return;

    setLiked(true);
    const likedExcuses = JSON.parse(localStorage.getItem('likedExcuses') || '[]');
    likedExcuses.push(excuseId);
    localStorage.setItem('likedExcuses', JSON.stringify(likedExcuses));

    onReaction('like');
    toast.success('Excuse liked!');
  };

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(excuse);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);

      triggerConfetti();
      onReaction('copy');
      toast.success('Excuse copied to clipboard!');
    } catch (error) {
      toast.error('Failed to copy excuse');
    }
  };

  const handleShare = () => {
    const tweetText = `Check out this excuse: "${excuse.substring(0, 100)}..."

Generated by Excuse Generator! ðŸŽ­

#FreelancerExcuses #EgyptianHumor`;

    const tweetUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(tweetText)}`;

    triggerConfetti();
    onReaction('share');
    window.open(tweetUrl, '_blank', 'noopener,noreferrer');
    toast.success('Opening share dialog...');
  };

  return (
    <div className="flex flex-wrap gap-4 justify-center">
      <motion.button
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
        onClick={handleLike}
        disabled={liked}
        className={`flex items-center gap-2 px-6 py-3 rounded-full font-medium transition-all ${
          liked
            ? 'bg-pink-500/30 text-pink-400 border-2 border-pink-500'
            : 'bg-gray-800 text-gray-300 border-2 border-gray-700 hover:border-pink-500 hover:text-pink-400'
        }`}
      >
        <Heart className={`w-5 h-5 ${liked ? 'fill-current' : ''}`} />
        <span>{liked ? 'Liked!' : 'Like'}</span>
      </motion.button>

      <motion.button
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
        onClick={handleCopy}
        className="flex items-center gap-2 px-6 py-3 rounded-full font-medium bg-gray-800 text-gray-300 border-2 border-gray-700 hover:border-blue-500 hover:text-blue-400 transition-all"
      >
        {copied ? (
          <>
            <Check className="w-5 h-5" />
            <span>Copied!</span>
          </>
        ) : (
          <>
            <Copy className="w-5 h-5" />
            <span>Copy</span>
          </>
        )}
      </motion.button>

      <motion.button
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
        onClick={handleShare}
        className="flex items-center gap-2 px-6 py-3 rounded-full font-medium bg-gray-800 text-gray-300 border-2 border-gray-700 hover:border-purple-500 hover:text-purple-400 transition-all"
      >
        <Share2 className="w-5 h-5" />
        <span>Share</span>
      </motion.button>
    </div>
  );
}
